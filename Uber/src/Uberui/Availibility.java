/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Uberui;

import uber.Cars;
import uber.Carshistory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Sarvesh
 */
public class Availibility extends javax.swing.JPanel {

    
    Carshistory hist;
    private Cars cars;
    public Availibility(Carshistory hist) {
        initComponents();
        this.hist = hist;
        populateAvailableCars();
        populateFirstAvailableCars();
    }

    

    /*Availibility(Carshistory hist) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Availability = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        available = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        firstavailable = new javax.swing.JTable();
        Availability1 = new javax.swing.JLabel();

        Availability.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Availability.setText("Availability");

        available.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Carname", "Carcompany", "Year", "City", "Serialno", "Modelno", "Manufacturer", "Seats", "Maintainence"
            }
        ));
        jScrollPane1.setViewportView(available);

        firstavailable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Carname", "Carcompany", "Year", "City", "Serialno", "Modelno", "Manufacturer", "Seats", "Maintainence"
            }
        ));
        jScrollPane2.setViewportView(firstavailable);

        Availability1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Availability1.setText("FirstAvailable Car");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Availability1)
                    .addComponent(Availability))
                .addGap(314, 314, 314))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(Availability)
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addComponent(Availability1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(204, 204, 204))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Availability;
    private javax.swing.JLabel Availability1;
    private javax.swing.JTable available;
    private javax.swing.JTable firstavailable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void populateAvailableCars() {
        DefaultTableModel model = (DefaultTableModel) available.getModel();
        model.setRowCount(0);
        
        for(Cars cars: hist.getHist()){
            Object[] row = new Object[9];
            if(cars.isAvailability()){
            row[0] = cars;
            row[1] = cars.getCarcompany();
            row[2] = cars.getYear();
            row[3] = cars.getCity();
            row[4] = cars.getSerialno();
            row[5] = cars.getModelno();
            row[6] = cars.getManufacturer();
            row[7] = cars.getSeatno();
            row[8] = cars.isMaintainencevalid();
            model.addRow(row);
    }

        }
    }

    private void populateFirstAvailableCars() {
        DefaultTableModel model = (DefaultTableModel) firstavailable.getModel();
        model.setRowCount(0);
        
        for(Cars cars: hist.getHist()){
            Object[] row = new Object[9];
            if(cars.isAvailability()){
            row[0] = cars;
            row[1] = cars.getCarcompany();
            row[2] = cars.getYear();
            row[3] = cars.getCity();
            row[4] = cars.getSerialno();
            row[5] = cars.getModelno();
            row[6] = cars.getManufacturer();
            row[7] = cars.getSeatno();
            row[8] = cars.isMaintainencevalid();
            model.addRow(row);
            break;
        }
    }
    }
}   

